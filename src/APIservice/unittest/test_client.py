#!/usr/bin/python
import sys, os
from pathlib import Path
sys.path.append(str(Path(os.path.dirname(sys.argv[0])) / Path("../../")))

import base64
import json
import requests

from datetime import datetime
from typing import List

from APIservice.proto import CID, Challenge, UserId
from pymrtd import ef

headers = {'content-type': 'application/json'}


def b64encode(data: bytes):
    return str(base64.b64encode(data), 'ascii')

def bsigs_to_b64sigs(bsigs):
    ssigs = []
    for bsig in bsigs:
        ssigs.append(b64encode(bsig))
    return ssigs


def requestChallenge(url: str) -> Challenge:
    payload = {
        "method": "passID.getChallenge",
        "params": [],
        "jsonrpc": "2.0",
        "id": 0,
    }

    response = requests.post(
        url, data=json.dumps(payload), headers=headers).json()
    if "error" in response:
        raise Exception(response['error'])
    return Challenge.fromBase64(response['result']['challenge'])

def requestRegister(url: str, dg15: ef.DG15, sod: ef.SOD, cid: CID, csigs: List[bytes]):
    payload = {
        "method": "passID.register",
        "params": {
            "dg15"  : b64encode(dg15.dump()),
            "sod"   : b64encode(sod.dump()),
            "cid"   : cid,
            "csigs" : bsigs_to_b64sigs(csigs),
         },
        "jsonrpc": "2.0",
        "id": 1,
    }

    response = requests.post(
        url, data=json.dumps(payload), headers=headers).json()
    if "error" in response:
        raise Exception(response['error'])

    result = response['result']
    uid = UserId.fromBase64(result['uid'])
    sk  = base64.b64decode(result['session_key'])
    et  = datetime.utcfromtimestamp(result['expires'])
    return (uid, sk, et)

def requestLogin(url: str, uid: UserId, cid: CID, csigs: List[bytes]):
    payload = {
        "method": "passID.login",
        "params": {
            "uid"  : uid.toBase64(),
            "cid"   : cid,
            "csigs" : bsigs_to_b64sigs(csigs),
         },
        "jsonrpc": "2.0",
        "id": 1,
    }

    response = requests.post(
        url, data=json.dumps(payload), headers=headers).json()
    if "error" in response:
        raise Exception(response['error'])

    result = response['result']
    sk  = base64.b64decode(result['session_key'])
    et  = datetime.utcfromtimestamp(result['expires'])
    return (sk, et)

def main():
    url = "http://localhost:8080/jsonrpc"

    raw_sod = bytes.fromhex
    sod = ef.SOD.load(raw_sod)

    rawDg15 = bytes.fromhex("6F81A230819F300D06092A864886F70D010101050003818D0030818902818100BD8620D45693E1CD8678639F22E9553F09E3AFD87BD26000113CE2798B7A02A2E0AB6B7525D09072109D938D6708167E8FAFAF83F17BFBA36CECCE26058C7ED9AE29516755B19F78CE0E73DA02340B117B8AB2ECA007F1390E93E896016335EB5C1E330B961C03E253D17874F7ABEE8D4962C49FFE578D46954FF23B26F5E5550203010001")
    dg15 = ef.DG15.load(rawDg15)

    sigc = Challenge.fromhex("47E4EE7F211F73265DD17658F6E21C1318BD6C81F37598E20A2756299542EFCF")
    csigs = [
        bytes.fromhex("8AECE4E0AB1A6B9E06B31ACBA51AE316D0B7B48E2F5FE13E575060F6B9DC27A2F9D03DCF67A141F466EEC753879106BE0992F46F5EAAD075EB1886D2ACE90D60C2EDA69880780CE4FA36EF27AB01C47527BD23B178EC8F213307281572C219487FC11B2C3D9C144DC98D96D1A79A7478449D692D3D14E8C044F81B3ADF0047E0"),
        bytes.fromhex("97251259E9EB453A8DC2D9CD85D5A49D2E83F31D6465CB1FBD09C5E7800D4F0FB9FF7312343CD3955CA3BE6768AD7938F3D36B0C9E2205923786949B5F48FBF1C94D01B5BC9DA88C8293E118F87E14E4CC409D52AA7ED266E20248AB3C04949838540DEB24588436607EA620B4825D002C5FAB4F07B618D72C0A9EC247653FE7"),
        bytes.fromhex("12C0972DFE9E1DDB42B46130D64339E0845578D85E5F0ED7C9E12036AE0C3D417BBAAA6CA5579E782DDEADA825E432C2AE9593B8DB5806327E22B18CD0AB86353C314925A01390806A1D6E8DDE2CD0D82D9671457139241E93BC308E5573C335D14EF6182A5171A443A82A2568D6B1373A1F227377C584ABA7B1E8B1F47E393F"),
        bytes.fromhex("0854CF7B69FB54286F97FC8B396722E21156DFEEC38CF5C63035B09A59C4EA7FCA79865D5EE166548AAE5AE1F629A57459B46F5D1D1E4EFE9369C0075903D3CA282D6B2CF5843E62CE53BEA33E3D6AA7A48147CC38C9B534437FD0DCD0F0C787BE74061DFA844435253D651E7986BA47F49FA49D7041BD1FE72B5E5D09221FD1"),
    ]


    try:
        print("Requesting challenge from server ...")
        c = requestChallenge(url)
        print("Server returned challenge: {}\n".format(c.hex()))
        assert c == sigc

        print("Registering new user ...")
        uid, sk, et = requestRegister(url, dg15, sod, sigc.id, csigs)
        print("User was successfully registered!\n  uid={}\n  session_key={}\n  session_expires={}\n".format(uid.hex(), sk.hex(), et))


        print("Requesting new challenge from server for login ...")
        c = requestChallenge(url)
        print("Server returned challenge: {}\n".format(c.hex()))
        assert c == sigc

        print("Logging in ...")
        sk, et = requestLogin(url, uid, c.id, csigs)
        print("Login succeed!\n  uid={}\n  session_key={}\n  session_expires={}\n".format(uid.hex(), sk.hex(), et))

    except AssertionError as e:
        print("Assert failed: {}".format(e))
    except Exception as e:
        print("Error: Server returned error: {}".format(str(e)))

    ##assert response["result"] == "echome!"
    
    #assert response["jsonrpc"]
    #assert response["id"] == 0

if __name__ == "__main__":
    main()

